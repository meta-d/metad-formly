/*! For license information please see _.contribution.js.LICENSE.txt */
var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__reExport=(target,module,copyDefault,desc)=>{if(module&&"object"==typeof module||"function"==typeof module)for(let key of __getOwnPropNames(module))__hasOwnProp.call(target,key)||!copyDefault&&"default"===key||__defProp(target,key,{get:()=>module[key],enumerable:!(desc=__getOwnPropDesc(module,key))||desc.enumerable});return target},monaco_editor_core_exports={};__reExport(monaco_editor_core_exports,monaco_editor_core_star);import*as monaco_editor_core_star from"../editor/editor.api.js";var languageDefinitions={},lazyLanguageLoaders={},LazyLanguageLoader=class{static getOrCreate(languageId){return lazyLanguageLoaders[languageId]||(lazyLanguageLoaders[languageId]=new LazyLanguageLoader(languageId)),lazyLanguageLoaders[languageId]}_languageId;_loadingTriggered;_lazyLoadPromise;_lazyLoadPromiseResolve;_lazyLoadPromiseReject;constructor(languageId){this._languageId=languageId,this._loadingTriggered=!1,this._lazyLoadPromise=new Promise(((resolve,reject)=>{this._lazyLoadPromiseResolve=resolve,this._lazyLoadPromiseReject=reject}))}load(){return this._loadingTriggered||(this._loadingTriggered=!0,languageDefinitions[this._languageId].loader().then((mod=>this._lazyLoadPromiseResolve(mod)),(err=>this._lazyLoadPromiseReject(err)))),this._lazyLoadPromise}};async function loadLanguage(languageId){await LazyLanguageLoader.getOrCreate(languageId).load();monaco_editor_core_exports.editor.createModel("",languageId).dispose()}function registerLanguage(def){const languageId=def.id;languageDefinitions[languageId]=def,monaco_editor_core_exports.languages.register(def);const lazyLanguageLoader=LazyLanguageLoader.getOrCreate(languageId);monaco_editor_core_exports.languages.registerTokensProviderFactory(languageId,{create:async()=>(await lazyLanguageLoader.load()).language}),monaco_editor_core_exports.languages.onLanguage(languageId,(async()=>{const mod=await lazyLanguageLoader.load();monaco_editor_core_exports.languages.setLanguageConfiguration(languageId,mod.conf)}))}export{loadLanguage,registerLanguage};