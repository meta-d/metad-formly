import{groupBy}from"../../../../base/common/arrays.js";import{dispose}from"../../../../base/common/lifecycle.js";import{getLeadingWhitespace}from"../../../../base/common/strings.js";import"./snippetSession.css";import{EditOperation}from"../../../common/core/editOperation.js";import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";import{ModelDecorationOptions}from"../../../common/model/textModel.js";import{ILabelService}from"../../../../platform/label/common/label.js";import{IWorkspaceContextService}from"../../../../platform/workspace/common/workspace.js";import{Choice,Placeholder,SnippetParser,Text}from"./snippetParser.js";import{ClipboardBasedVariableResolver,CommentBasedVariableResolver,CompositeSnippetVariableResolver,ModelBasedVariableResolver,RandomBasedVariableResolver,SelectionBasedVariableResolver,TimeBasedVariableResolver,WorkspaceBasedVariableResolver}from"./snippetVariables.js";export class OneSnippet{constructor(_editor,_snippet,_offset,_snippetLineLeadingWhitespace){this._editor=_editor,this._snippet=_snippet,this._offset=_offset,this._snippetLineLeadingWhitespace=_snippetLineLeadingWhitespace,this._nestingLevel=1,this._placeholderGroups=groupBy(_snippet.placeholders,Placeholder.compareByIndex),this._placeholderGroupsIdx=-1}dispose(){this._placeholderDecorations&&this._editor.deltaDecorations([...this._placeholderDecorations.values()],[]),this._placeholderGroups.length=0}_initDecorations(){if(this._placeholderDecorations)return;this._placeholderDecorations=new Map;const model=this._editor.getModel();this._editor.changeDecorations((accessor=>{for(const placeholder of this._snippet.placeholders){const placeholderOffset=this._snippet.offset(placeholder),placeholderLen=this._snippet.fullLen(placeholder),range=Range.fromPositions(model.getPositionAt(this._offset+placeholderOffset),model.getPositionAt(this._offset+placeholderOffset+placeholderLen)),options=placeholder.isFinalTabstop?OneSnippet._decor.inactiveFinal:OneSnippet._decor.inactive,handle=accessor.addDecoration(range,options);this._placeholderDecorations.set(placeholder,handle)}}))}move(fwd){if(!this._editor.hasModel())return[];if(this._initDecorations(),this._placeholderGroupsIdx>=0){let operations=[];for(const placeholder of this._placeholderGroups[this._placeholderGroupsIdx])if(placeholder.transform){const id=this._placeholderDecorations.get(placeholder),range=this._editor.getModel().getDecorationRange(id),currentValue=this._editor.getModel().getValueInRange(range),transformedValueLines=placeholder.transform.resolve(currentValue).split(/\r\n|\r|\n/);for(let i=1;i<transformedValueLines.length;i++)transformedValueLines[i]=this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace+transformedValueLines[i]);operations.push(EditOperation.replace(range,transformedValueLines.join(this._editor.getModel().getEOL())))}operations.length>0&&this._editor.executeEdits("snippet.placeholderTransform",operations)}let couldSkipThisPlaceholder=!1;!0===fwd&&this._placeholderGroupsIdx<this._placeholderGroups.length-1?(this._placeholderGroupsIdx+=1,couldSkipThisPlaceholder=!0):!1===fwd&&this._placeholderGroupsIdx>0&&(this._placeholderGroupsIdx-=1,couldSkipThisPlaceholder=!0);const newSelections=this._editor.getModel().changeDecorations((accessor=>{const activePlaceholders=new Set,selections=[];for(const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]){const id=this._placeholderDecorations.get(placeholder),range=this._editor.getModel().getDecorationRange(id);selections.push(new Selection(range.startLineNumber,range.startColumn,range.endLineNumber,range.endColumn)),couldSkipThisPlaceholder=couldSkipThisPlaceholder&&this._hasPlaceholderBeenCollapsed(placeholder),accessor.changeDecorationOptions(id,placeholder.isFinalTabstop?OneSnippet._decor.activeFinal:OneSnippet._decor.active),activePlaceholders.add(placeholder);for(const enclosingPlaceholder of this._snippet.enclosingPlaceholders(placeholder)){const id=this._placeholderDecorations.get(enclosingPlaceholder);accessor.changeDecorationOptions(id,enclosingPlaceholder.isFinalTabstop?OneSnippet._decor.activeFinal:OneSnippet._decor.active),activePlaceholders.add(enclosingPlaceholder)}}for(const[placeholder,id]of this._placeholderDecorations)activePlaceholders.has(placeholder)||accessor.changeDecorationOptions(id,placeholder.isFinalTabstop?OneSnippet._decor.inactiveFinal:OneSnippet._decor.inactive);return selections}));return couldSkipThisPlaceholder?this.move(fwd):null!=newSelections?newSelections:[]}_hasPlaceholderBeenCollapsed(placeholder){let marker=placeholder;for(;marker;){if(marker instanceof Placeholder){const id=this._placeholderDecorations.get(marker);if(this._editor.getModel().getDecorationRange(id).isEmpty()&&marker.toString().length>0)return!0}marker=marker.parent}return!1}get isAtFirstPlaceholder(){return this._placeholderGroupsIdx<=0||0===this._placeholderGroups.length}get isAtLastPlaceholder(){return this._placeholderGroupsIdx===this._placeholderGroups.length-1}get hasPlaceholder(){return this._snippet.placeholders.length>0}computePossibleSelections(){const result=new Map;for(const placeholdersWithEqualIndex of this._placeholderGroups){let ranges;for(const placeholder of placeholdersWithEqualIndex){if(placeholder.isFinalTabstop)break;ranges||(ranges=[],result.set(placeholder.index,ranges));const id=this._placeholderDecorations.get(placeholder),range=this._editor.getModel().getDecorationRange(id);if(!range){result.delete(placeholder.index);break}ranges.push(range)}}return result}get choice(){return this._placeholderGroups[this._placeholderGroupsIdx][0].choice}merge(others){const model=this._editor.getModel();this._nestingLevel*=10,this._editor.changeDecorations((accessor=>{for(const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]){const nested=others.shift();console.assert(!nested._placeholderDecorations);const indexLastPlaceholder=nested._snippet.placeholderInfo.last.index;for(const nestedPlaceholder of nested._snippet.placeholderInfo.all)nestedPlaceholder.isFinalTabstop?nestedPlaceholder.index=placeholder.index+(indexLastPlaceholder+1)/this._nestingLevel:nestedPlaceholder.index=placeholder.index+nestedPlaceholder.index/this._nestingLevel;this._snippet.replace(placeholder,nested._snippet.children);const id=this._placeholderDecorations.get(placeholder);accessor.removeDecoration(id),this._placeholderDecorations.delete(placeholder);for(const placeholder of nested._snippet.placeholders){const placeholderOffset=nested._snippet.offset(placeholder),placeholderLen=nested._snippet.fullLen(placeholder),range=Range.fromPositions(model.getPositionAt(nested._offset+placeholderOffset),model.getPositionAt(nested._offset+placeholderOffset+placeholderLen)),handle=accessor.addDecoration(range,OneSnippet._decor.inactive);this._placeholderDecorations.set(placeholder,handle)}}this._placeholderGroups=groupBy(this._snippet.placeholders,Placeholder.compareByIndex)}))}}OneSnippet._decor={active:ModelDecorationOptions.register({description:"snippet-placeholder-1",stickiness:0,className:"snippet-placeholder"}),inactive:ModelDecorationOptions.register({description:"snippet-placeholder-2",stickiness:1,className:"snippet-placeholder"}),activeFinal:ModelDecorationOptions.register({description:"snippet-placeholder-3",stickiness:1,className:"finish-snippet-placeholder"}),inactiveFinal:ModelDecorationOptions.register({description:"snippet-placeholder-4",stickiness:1,className:"finish-snippet-placeholder"})};const _defaultOptions={overwriteBefore:0,overwriteAfter:0,adjustWhitespace:!0,clipboardText:void 0,overtypingCapturer:void 0};export class SnippetSession{constructor(editor,template,options=_defaultOptions){this._templateMerges=[],this._snippets=[],this._editor=editor,this._template=template,this._options=options}static adjustWhitespace(model,position,snippet,adjustIndentation,adjustNewlines){const line=model.getLineContent(position.lineNumber),lineLeadingWhitespace=getLeadingWhitespace(line,0,position.column-1);let snippetTextString;return snippet.walk((marker=>{if(!(marker instanceof Text)||marker.parent instanceof Choice)return!0;const lines=marker.value.split(/\r\n|\r|\n/);if(adjustIndentation){const offset=snippet.offset(marker);if(0===offset)lines[0]=model.normalizeIndentation(lines[0]);else{snippetTextString=null!=snippetTextString?snippetTextString:snippet.toString();let prevChar=snippetTextString.charCodeAt(offset-1);10!==prevChar&&13!==prevChar||(lines[0]=model.normalizeIndentation(lineLeadingWhitespace+lines[0]))}for(let i=1;i<lines.length;i++)lines[i]=model.normalizeIndentation(lineLeadingWhitespace+lines[i])}const newValue=lines.join(model.getEOL());return newValue!==marker.value&&(marker.parent.replace(marker,[new Text(newValue)]),snippetTextString=void 0),!0})),lineLeadingWhitespace}static adjustSelection(model,selection,overwriteBefore,overwriteAfter){if(0!==overwriteBefore||0!==overwriteAfter){const{positionLineNumber,positionColumn}=selection,positionColumnBefore=positionColumn-overwriteBefore,positionColumnAfter=positionColumn+overwriteAfter,range=model.validateRange({startLineNumber:positionLineNumber,startColumn:positionColumnBefore,endLineNumber:positionLineNumber,endColumn:positionColumnAfter});selection=Selection.createWithDirection(range.startLineNumber,range.startColumn,range.endLineNumber,range.endColumn,selection.getDirection())}return selection}static createEditsAndSnippets(editor,template,overwriteBefore,overwriteAfter,enforceFinalTabstop,adjustWhitespace,clipboardText,overtypingCapturer){const edits=[],snippets=[];if(!editor.hasModel())return{edits,snippets};const model=editor.getModel(),workspaceService=editor.invokeWithinContext((accessor=>accessor.get(IWorkspaceContextService))),modelBasedVariableResolver=editor.invokeWithinContext((accessor=>new ModelBasedVariableResolver(accessor.get(ILabelService),model))),readClipboardText=()=>clipboardText;let delta=0,firstBeforeText=model.getValueInRange(SnippetSession.adjustSelection(model,editor.getSelection(),overwriteBefore,0)),firstAfterText=model.getValueInRange(SnippetSession.adjustSelection(model,editor.getSelection(),0,overwriteAfter)),firstLineFirstNonWhitespace=model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);const indexedSelections=editor.getSelections().map(((selection,idx)=>({selection,idx}))).sort(((a,b)=>Range.compareRangesUsingStarts(a.selection,b.selection)));for(const{selection,idx}of indexedSelections){let extensionBefore=SnippetSession.adjustSelection(model,selection,overwriteBefore,0),extensionAfter=SnippetSession.adjustSelection(model,selection,0,overwriteAfter);firstBeforeText!==model.getValueInRange(extensionBefore)&&(extensionBefore=selection),firstAfterText!==model.getValueInRange(extensionAfter)&&(extensionAfter=selection);const snippetSelection=selection.setStartPosition(extensionBefore.startLineNumber,extensionBefore.startColumn).setEndPosition(extensionAfter.endLineNumber,extensionAfter.endColumn),snippet=(new SnippetParser).parse(template,!0,enforceFinalTabstop),start=snippetSelection.getStartPosition(),snippetLineLeadingWhitespace=SnippetSession.adjustWhitespace(model,start,snippet,adjustWhitespace||idx>0&&firstLineFirstNonWhitespace!==model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber),!0);snippet.resolveVariables(new CompositeSnippetVariableResolver([modelBasedVariableResolver,new ClipboardBasedVariableResolver(readClipboardText,idx,indexedSelections.length,"spread"===editor.getOption(71)),new SelectionBasedVariableResolver(model,selection,idx,overtypingCapturer),new CommentBasedVariableResolver(model,selection),new TimeBasedVariableResolver,new WorkspaceBasedVariableResolver(workspaceService),new RandomBasedVariableResolver]));const offset=model.getOffsetAt(start)+delta;delta+=snippet.toString().length-model.getValueLengthInRange(snippetSelection),edits[idx]=EditOperation.replace(snippetSelection,snippet.toString()),edits[idx].identifier={major:idx,minor:0},snippets[idx]=new OneSnippet(editor,snippet,offset,snippetLineLeadingWhitespace)}return{edits,snippets}}dispose(){dispose(this._snippets)}_logInfo(){return`template="${this._template}", merged_templates="${this._templateMerges.join(" -> ")}"`}insert(){if(!this._editor.hasModel())return;const{edits,snippets}=SnippetSession.createEditsAndSnippets(this._editor,this._template,this._options.overwriteBefore,this._options.overwriteAfter,!1,this._options.adjustWhitespace,this._options.clipboardText,this._options.overtypingCapturer);this._snippets=snippets,this._editor.executeEdits("snippet",edits,(undoEdits=>this._snippets[0].hasPlaceholder?this._move(!0):undoEdits.filter((edit=>!!edit.identifier)).map((edit=>Selection.fromPositions(edit.range.getEndPosition()))))),this._editor.revealRange(this._editor.getSelections()[0])}merge(template,options=_defaultOptions){if(!this._editor.hasModel())return;this._templateMerges.push([this._snippets[0]._nestingLevel,this._snippets[0]._placeholderGroupsIdx,template]);const{edits,snippets}=SnippetSession.createEditsAndSnippets(this._editor,template,options.overwriteBefore,options.overwriteAfter,!0,options.adjustWhitespace,options.clipboardText,options.overtypingCapturer);this._editor.executeEdits("snippet",edits,(undoEdits=>{for(const snippet of this._snippets)snippet.merge(snippets);return console.assert(0===snippets.length),this._snippets[0].hasPlaceholder?this._move(void 0):undoEdits.filter((edit=>!!edit.identifier)).map((edit=>Selection.fromPositions(edit.range.getEndPosition())))}))}next(){const newSelections=this._move(!0);this._editor.setSelections(newSelections),this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition())}prev(){const newSelections=this._move(!1);this._editor.setSelections(newSelections),this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition())}_move(fwd){const selections=[];for(const snippet of this._snippets){const oneSelection=snippet.move(fwd);selections.push(...oneSelection)}return selections}get isAtFirstPlaceholder(){return this._snippets[0].isAtFirstPlaceholder}get isAtLastPlaceholder(){return this._snippets[0].isAtLastPlaceholder}get hasPlaceholder(){return this._snippets[0].hasPlaceholder}get choice(){return this._snippets[0].choice}isSelectionWithinPlaceholders(){if(!this.hasPlaceholder)return!1;const selections=this._editor.getSelections();if(selections.length<this._snippets.length)return!1;let allPossibleSelections=new Map;for(const snippet of this._snippets){const possibleSelections=snippet.computePossibleSelections();if(0===allPossibleSelections.size)for(const[index,ranges]of possibleSelections){ranges.sort(Range.compareRangesUsingStarts);for(const selection of selections)if(ranges[0].containsRange(selection)){allPossibleSelections.set(index,[]);break}}if(0===allPossibleSelections.size)return!1;allPossibleSelections.forEach(((array,index)=>{array.push(...possibleSelections.get(index))}))}selections.sort(Range.compareRangesUsingStarts);for(let[index,ranges]of allPossibleSelections)if(ranges.length===selections.length){ranges.sort(Range.compareRangesUsingStarts);for(let i=0;i<ranges.length;i++)ranges[i].containsRange(selections[i])||allPossibleSelections.delete(index)}else allPossibleSelections.delete(index);return allPossibleSelections.size>0}}