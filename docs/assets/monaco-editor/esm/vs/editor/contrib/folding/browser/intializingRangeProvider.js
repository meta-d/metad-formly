import{sanitizeRanges}from"./syntaxRangeProvider.js";export const ID_INIT_PROVIDER="init";export class InitializingRangeProvider{constructor(editorModel,initialRanges,onTimeout,timeoutTime){if(this.editorModel=editorModel,this.id="init",initialRanges.length){let toDecorationRange=range=>({range:{startLineNumber:range.startLineNumber,startColumn:0,endLineNumber:range.endLineNumber,endColumn:editorModel.getLineLength(range.endLineNumber)},options:{description:"folding-initializing-range-provider",stickiness:1}});this.decorationIds=editorModel.deltaDecorations([],initialRanges.map(toDecorationRange)),this.timeout=setTimeout(onTimeout,timeoutTime)}}dispose(){this.decorationIds&&(this.editorModel.deltaDecorations(this.decorationIds,[]),this.decorationIds=void 0),"number"==typeof this.timeout&&(clearTimeout(this.timeout),this.timeout=void 0)}compute(cancelationToken){let foldingRangeData=[];if(this.decorationIds)for(let id of this.decorationIds){let range=this.editorModel.getDecorationRange(id);range&&foldingRangeData.push({start:range.startLineNumber,end:range.endLineNumber,rank:1})}return Promise.resolve(sanitizeRanges(foldingRangeData,Number.MAX_VALUE))}}