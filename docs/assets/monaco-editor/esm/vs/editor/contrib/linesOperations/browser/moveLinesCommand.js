import*as strings from"../../../../base/common/strings.js";import{ShiftCommand}from"../../../common/commands/shiftCommand.js";import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";import{IndentAction}from"../../../common/languages/languageConfiguration.js";import{LanguageConfigurationRegistry}from"../../../common/languages/languageConfigurationRegistry.js";import*as indentUtils from"../../indentation/browser/indentUtils.js";export class MoveLinesCommand{constructor(selection,isMovingDown,autoIndent){this._selection=selection,this._isMovingDown=isMovingDown,this._autoIndent=autoIndent,this._selectionId=null,this._moveEndLineSelectionShrink=!1}getEditOperations(model,builder){let modelLineCount=model.getLineCount();if(this._isMovingDown&&this._selection.endLineNumber===modelLineCount)return void(this._selectionId=builder.trackSelection(this._selection));if(!this._isMovingDown&&1===this._selection.startLineNumber)return void(this._selectionId=builder.trackSelection(this._selection));this._moveEndPositionDown=!1;let s=this._selection;s.startLineNumber<s.endLineNumber&&1===s.endColumn&&(this._moveEndPositionDown=!0,s=s.setEndPosition(s.endLineNumber-1,model.getLineMaxColumn(s.endLineNumber-1)));const{tabSize,indentSize,insertSpaces}=model.getOptions();let indentConverter=this.buildIndentConverter(tabSize,indentSize,insertSpaces),virtualModel={getLineTokens:lineNumber=>model.getLineTokens(lineNumber),getLanguageId:()=>model.getLanguageId(),getLanguageIdAtPosition:(lineNumber,column)=>model.getLanguageIdAtPosition(lineNumber,column),getLineContent:null};if(s.startLineNumber===s.endLineNumber&&1===model.getLineMaxColumn(s.startLineNumber)){let lineNumber=s.startLineNumber,otherLineNumber=this._isMovingDown?lineNumber+1:lineNumber-1;1===model.getLineMaxColumn(otherLineNumber)?builder.addEditOperation(new Range(1,1,1,1),null):(builder.addEditOperation(new Range(lineNumber,1,lineNumber,1),model.getLineContent(otherLineNumber)),builder.addEditOperation(new Range(otherLineNumber,1,otherLineNumber,model.getLineMaxColumn(otherLineNumber)),null)),s=new Selection(otherLineNumber,1,otherLineNumber,1)}else{let movingLineNumber,movingLineText;if(this._isMovingDown){movingLineNumber=s.endLineNumber+1,movingLineText=model.getLineContent(movingLineNumber),builder.addEditOperation(new Range(movingLineNumber-1,model.getLineMaxColumn(movingLineNumber-1),movingLineNumber,model.getLineMaxColumn(movingLineNumber)),null);let insertingText=movingLineText;if(this.shouldAutoIndent(model,s)){let movingLineMatchResult=this.matchEnterRule(model,indentConverter,tabSize,movingLineNumber,s.startLineNumber-1);if(null!==movingLineMatchResult){let oldIndentation=strings.getLeadingWhitespace(model.getLineContent(movingLineNumber)),newSpaceCnt=movingLineMatchResult+indentUtils.getSpaceCnt(oldIndentation,tabSize),newIndentation=indentUtils.generateIndent(newSpaceCnt,tabSize,insertSpaces);insertingText=newIndentation+this.trimLeft(movingLineText)}else{virtualModel.getLineContent=lineNumber=>lineNumber===s.startLineNumber?model.getLineContent(movingLineNumber):model.getLineContent(lineNumber);let indentOfMovingLine=LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent,virtualModel,model.getLanguageIdAtPosition(movingLineNumber,1),s.startLineNumber,indentConverter);if(null!==indentOfMovingLine){let oldIndentation=strings.getLeadingWhitespace(model.getLineContent(movingLineNumber)),newSpaceCnt=indentUtils.getSpaceCnt(indentOfMovingLine,tabSize);if(newSpaceCnt!==indentUtils.getSpaceCnt(oldIndentation,tabSize)){let newIndentation=indentUtils.generateIndent(newSpaceCnt,tabSize,insertSpaces);insertingText=newIndentation+this.trimLeft(movingLineText)}}}builder.addEditOperation(new Range(s.startLineNumber,1,s.startLineNumber,1),insertingText+"\n");let ret=this.matchEnterRuleMovingDown(model,indentConverter,tabSize,s.startLineNumber,movingLineNumber,insertingText);if(null!==ret)0!==ret&&this.getIndentEditsOfMovingBlock(model,builder,s,tabSize,insertSpaces,ret);else{virtualModel.getLineContent=lineNumber=>lineNumber===s.startLineNumber?insertingText:lineNumber>=s.startLineNumber+1&&lineNumber<=s.endLineNumber+1?model.getLineContent(lineNumber-1):model.getLineContent(lineNumber);let newIndentatOfMovingBlock=LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent,virtualModel,model.getLanguageIdAtPosition(movingLineNumber,1),s.startLineNumber+1,indentConverter);if(null!==newIndentatOfMovingBlock){const oldIndentation=strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber)),newSpaceCnt=indentUtils.getSpaceCnt(newIndentatOfMovingBlock,tabSize),oldSpaceCnt=indentUtils.getSpaceCnt(oldIndentation,tabSize);if(newSpaceCnt!==oldSpaceCnt){const spaceCntOffset=newSpaceCnt-oldSpaceCnt;this.getIndentEditsOfMovingBlock(model,builder,s,tabSize,insertSpaces,spaceCntOffset)}}}}else builder.addEditOperation(new Range(s.startLineNumber,1,s.startLineNumber,1),insertingText+"\n")}else if(movingLineNumber=s.startLineNumber-1,movingLineText=model.getLineContent(movingLineNumber),builder.addEditOperation(new Range(movingLineNumber,1,movingLineNumber+1,1),null),builder.addEditOperation(new Range(s.endLineNumber,model.getLineMaxColumn(s.endLineNumber),s.endLineNumber,model.getLineMaxColumn(s.endLineNumber)),"\n"+movingLineText),this.shouldAutoIndent(model,s)){virtualModel.getLineContent=lineNumber=>lineNumber===movingLineNumber?model.getLineContent(s.startLineNumber):model.getLineContent(lineNumber);let ret=this.matchEnterRule(model,indentConverter,tabSize,s.startLineNumber,s.startLineNumber-2);if(null!==ret)0!==ret&&this.getIndentEditsOfMovingBlock(model,builder,s,tabSize,insertSpaces,ret);else{let indentOfFirstLine=LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent,virtualModel,model.getLanguageIdAtPosition(s.startLineNumber,1),movingLineNumber,indentConverter);if(null!==indentOfFirstLine){let oldIndent=strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber)),newSpaceCnt=indentUtils.getSpaceCnt(indentOfFirstLine,tabSize),oldSpaceCnt=indentUtils.getSpaceCnt(oldIndent,tabSize);if(newSpaceCnt!==oldSpaceCnt){let spaceCntOffset=newSpaceCnt-oldSpaceCnt;this.getIndentEditsOfMovingBlock(model,builder,s,tabSize,insertSpaces,spaceCntOffset)}}}}}this._selectionId=builder.trackSelection(s)}buildIndentConverter(tabSize,indentSize,insertSpaces){return{shiftIndent:indentation=>ShiftCommand.shiftIndent(indentation,indentation.length+1,tabSize,indentSize,insertSpaces),unshiftIndent:indentation=>ShiftCommand.unshiftIndent(indentation,indentation.length+1,tabSize,indentSize,insertSpaces)}}parseEnterResult(model,indentConverter,tabSize,line,enter){if(enter){let enterPrefix=enter.indentation;enter.indentAction===IndentAction.None||enter.indentAction===IndentAction.Indent?enterPrefix=enter.indentation+enter.appendText:enter.indentAction===IndentAction.IndentOutdent?enterPrefix=enter.indentation:enter.indentAction===IndentAction.Outdent&&(enterPrefix=indentConverter.unshiftIndent(enter.indentation)+enter.appendText);let movingLineText=model.getLineContent(line);if(this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix))>=0){let oldIndentation=strings.getLeadingWhitespace(model.getLineContent(line)),newIndentation=strings.getLeadingWhitespace(enterPrefix),indentMetadataOfMovelingLine=LanguageConfigurationRegistry.getIndentMetadata(model,line);return null!==indentMetadataOfMovelingLine&&2&indentMetadataOfMovelingLine&&(newIndentation=indentConverter.unshiftIndent(newIndentation)),indentUtils.getSpaceCnt(newIndentation,tabSize)-indentUtils.getSpaceCnt(oldIndentation,tabSize)}}return null}matchEnterRuleMovingDown(model,indentConverter,tabSize,line,futureAboveLineNumber,futureAboveLineText){if(strings.lastNonWhitespaceIndex(futureAboveLineText)>=0){let maxColumn=model.getLineMaxColumn(futureAboveLineNumber),enter=LanguageConfigurationRegistry.getEnterAction(this._autoIndent,model,new Range(futureAboveLineNumber,maxColumn,futureAboveLineNumber,maxColumn));return this.parseEnterResult(model,indentConverter,tabSize,line,enter)}{let validPrecedingLine=line-1;for(;validPrecedingLine>=1;){let lineContent=model.getLineContent(validPrecedingLine);if(strings.lastNonWhitespaceIndex(lineContent)>=0)break;validPrecedingLine--}if(validPrecedingLine<1||line>model.getLineCount())return null;let maxColumn=model.getLineMaxColumn(validPrecedingLine),enter=LanguageConfigurationRegistry.getEnterAction(this._autoIndent,model,new Range(validPrecedingLine,maxColumn,validPrecedingLine,maxColumn));return this.parseEnterResult(model,indentConverter,tabSize,line,enter)}}matchEnterRule(model,indentConverter,tabSize,line,oneLineAbove,previousLineText){let validPrecedingLine=oneLineAbove;for(;validPrecedingLine>=1;){let lineContent;if(lineContent=validPrecedingLine===oneLineAbove&&void 0!==previousLineText?previousLineText:model.getLineContent(validPrecedingLine),strings.lastNonWhitespaceIndex(lineContent)>=0)break;validPrecedingLine--}if(validPrecedingLine<1||line>model.getLineCount())return null;let maxColumn=model.getLineMaxColumn(validPrecedingLine),enter=LanguageConfigurationRegistry.getEnterAction(this._autoIndent,model,new Range(validPrecedingLine,maxColumn,validPrecedingLine,maxColumn));return this.parseEnterResult(model,indentConverter,tabSize,line,enter)}trimLeft(str){return str.replace(/^\s+/,"")}shouldAutoIndent(model,selection){if(this._autoIndent<4)return!1;if(!model.isCheapToTokenize(selection.startLineNumber))return!1;let languageAtSelectionStart=model.getLanguageIdAtPosition(selection.startLineNumber,1);return languageAtSelectionStart===model.getLanguageIdAtPosition(selection.endLineNumber,1)&&null!==LanguageConfigurationRegistry.getIndentRulesSupport(languageAtSelectionStart)}getIndentEditsOfMovingBlock(model,builder,s,tabSize,insertSpaces,offset){for(let i=s.startLineNumber;i<=s.endLineNumber;i++){let lineContent=model.getLineContent(i),originalIndent=strings.getLeadingWhitespace(lineContent),newSpacesCnt=indentUtils.getSpaceCnt(originalIndent,tabSize)+offset,newIndent=indentUtils.generateIndent(newSpacesCnt,tabSize,insertSpaces);newIndent!==originalIndent&&(builder.addEditOperation(new Range(i,1,i,originalIndent.length+1),newIndent),i===s.endLineNumber&&s.endColumn<=originalIndent.length+1&&""===newIndent&&(this._moveEndLineSelectionShrink=!0))}}computeCursorState(model,helper){let result=helper.getTrackedSelection(this._selectionId);return this._moveEndPositionDown&&(result=result.setEndPosition(result.endLineNumber+1,1)),this._moveEndLineSelectionShrink&&result.startLineNumber<result.endLineNumber&&(result=result.setEndPosition(result.endLineNumber,2)),result}}