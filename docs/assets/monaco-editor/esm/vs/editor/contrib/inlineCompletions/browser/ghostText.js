import{Emitter}from"../../../../base/common/event.js";import{Disposable}from"../../../../base/common/lifecycle.js";import{Range}from"../../../common/core/range.js";export class GhostText{constructor(lineNumber,parts,additionalReservedLineCount=0){this.lineNumber=lineNumber,this.parts=parts,this.additionalReservedLineCount=additionalReservedLineCount}renderForScreenReader(lineText){if(0===this.parts.length)return"";const lastPart=this.parts[this.parts.length-1];return applyEdits(lineText.substr(0,lastPart.column-1),this.parts.map((p=>({range:{startLineNumber:1,endLineNumber:1,startColumn:p.column,endColumn:p.column},text:p.lines.join("\n")})))).substring(this.parts[0].column-1)}}class PositionOffsetTransformer{constructor(text){this.lineStartOffsetByLineIdx=[],this.lineStartOffsetByLineIdx.push(0);for(let i=0;i<text.length;i++)"\n"===text.charAt(i)&&this.lineStartOffsetByLineIdx.push(i+1)}getOffset(position){return this.lineStartOffsetByLineIdx[position.lineNumber-1]+position.column-1}}function applyEdits(text,edits){const transformer=new PositionOffsetTransformer(text),offsetEdits=edits.map((e=>{const range=Range.lift(e.range);return{startOffset:transformer.getOffset(range.getStartPosition()),endOffset:transformer.getOffset(range.getEndPosition()),text:e.text}}));offsetEdits.sort(((a,b)=>b.startOffset-a.startOffset));for(const edit of offsetEdits)text=text.substring(0,edit.startOffset)+edit.text+text.substring(edit.endOffset);return text}export class GhostTextPart{constructor(column,lines,preview){this.column=column,this.lines=lines,this.preview=preview}}export class BaseGhostTextWidgetModel extends Disposable{constructor(editor){super(),this.editor=editor,this._expanded=void 0,this.onDidChangeEmitter=new Emitter,this.onDidChange=this.onDidChangeEmitter.event,this._register(editor.onDidChangeConfiguration((e=>{e.hasChanged(106)&&void 0===this._expanded&&this.onDidChangeEmitter.fire()})))}setExpanded(expanded){this._expanded=!0,this.onDidChangeEmitter.fire()}}