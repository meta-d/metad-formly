import"./standalone-tokens.css";import{splitLines}from"../../../base/common/strings.js";import{FontMeasurements}from"../../browser/config/fontMeasurements.js";import{ICodeEditorService}from"../../browser/services/codeEditorService.js";import{DiffNavigator}from"../../browser/widget/diffNavigator.js";import{ApplyUpdateResult,ConfigurationChangedEvent,EditorOptions}from"../../common/config/editorOptions.js";import{BareFontInfo,FontInfo}from"../../common/config/fontInfo.js";import{EditorType}from"../../common/editorCommon.js";import{FindMatch,TextModelResolvedOptions}from"../../common/model.js";import*as languages from"../../common/languages.js";import{ILanguageConfigurationService}from"../../common/languages/languageConfigurationRegistry.js";import{NullState,nullTokenize}from"../../common/languages/nullTokenize.js";import{ILanguageService}from"../../common/languages/language.js";import{IModelService}from"../../common/services/model.js";import{createWebWorker as actualCreateWebWorker}from"../../browser/services/webWorker.js";import*as standaloneEnums from"../../common/standalone/standaloneEnums.js";import{Colorizer}from"./colorizer.js";import{createTextModel,StandaloneDiffEditor,StandaloneEditor}from"./standaloneCodeEditor.js";import{StandaloneServices}from"./standaloneServices.js";import{IStandaloneThemeService}from"../common/standaloneTheme.js";import{CommandsRegistry}from"../../../platform/commands/common/commands.js";import{IMarkerService}from"../../../platform/markers/common/markers.js";export function create(domElement,options,override){return StandaloneServices.initialize(override||{}).createInstance(StandaloneEditor,domElement,options)}export function onDidCreateEditor(listener){return StandaloneServices.get(ICodeEditorService).onCodeEditorAdd((editor=>{listener(editor)}))}export function createDiffEditor(domElement,options,override){return StandaloneServices.initialize(override||{}).createInstance(StandaloneDiffEditor,domElement,options)}export function createDiffNavigator(diffEditor,opts){return new DiffNavigator(diffEditor,opts)}export function createModel(value,language,uri){const languageService=StandaloneServices.get(ILanguageService),languageId=languageService.getLanguageIdByMimeType(language)||language;return createTextModel(StandaloneServices.get(IModelService),languageService,value,languageId,uri)}export function setModelLanguage(model,languageId){const languageService=StandaloneServices.get(ILanguageService);StandaloneServices.get(IModelService).setMode(model,languageService.createById(languageId))}export function setModelMarkers(model,owner,markers){if(model){StandaloneServices.get(IMarkerService).changeOne(owner,model.uri,markers)}}export function getModelMarkers(filter){return StandaloneServices.get(IMarkerService).read(filter)}export function onDidChangeMarkers(listener){return StandaloneServices.get(IMarkerService).onMarkerChanged(listener)}export function getModel(uri){return StandaloneServices.get(IModelService).getModel(uri)}export function getModels(){return StandaloneServices.get(IModelService).getModels()}export function onDidCreateModel(listener){return StandaloneServices.get(IModelService).onModelAdded(listener)}export function onWillDisposeModel(listener){return StandaloneServices.get(IModelService).onModelRemoved(listener)}export function onDidChangeModelLanguage(listener){return StandaloneServices.get(IModelService).onModelLanguageChanged((e=>{listener({model:e.model,oldLanguage:e.oldLanguageId})}))}export function createWebWorker(opts){return actualCreateWebWorker(StandaloneServices.get(IModelService),StandaloneServices.get(ILanguageConfigurationService),opts)}export function colorizeElement(domNode,options){const languageService=StandaloneServices.get(ILanguageService),themeService=StandaloneServices.get(IStandaloneThemeService);return themeService.registerEditorContainer(domNode),Colorizer.colorizeElement(themeService,languageService,domNode,options)}export function colorize(text,languageId,options){const languageService=StandaloneServices.get(ILanguageService);return StandaloneServices.get(IStandaloneThemeService).registerEditorContainer(document.body),Colorizer.colorize(languageService,text,languageId,options)}export function colorizeModelLine(model,lineNumber,tabSize=4){return StandaloneServices.get(IStandaloneThemeService).registerEditorContainer(document.body),Colorizer.colorizeModelLine(model,lineNumber,tabSize)}function getSafeTokenizationSupport(language){const tokenizationSupport=languages.TokenizationRegistry.get(language);return tokenizationSupport||{getInitialState:()=>NullState,tokenize:(line,hasEOL,state)=>nullTokenize(language,state)}}export function tokenize(text,languageId){languages.TokenizationRegistry.getOrCreate(languageId);const tokenizationSupport=getSafeTokenizationSupport(languageId),lines=splitLines(text),result=[];let state=tokenizationSupport.getInitialState();for(let i=0,len=lines.length;i<len;i++){const line=lines[i],tokenizationResult=tokenizationSupport.tokenize(line,!0,state);result[i]=tokenizationResult.tokens,state=tokenizationResult.endState}return result}export function defineTheme(themeName,themeData){StandaloneServices.get(IStandaloneThemeService).defineTheme(themeName,themeData)}export function setTheme(themeName){StandaloneServices.get(IStandaloneThemeService).setTheme(themeName)}export function remeasureFonts(){FontMeasurements.clearAllFontInfos()}export function registerCommand(id,handler){return CommandsRegistry.registerCommand({id,handler})}export function createMonacoEditorAPI(){return{create,onDidCreateEditor,createDiffEditor,createDiffNavigator,createModel,setModelLanguage,setModelMarkers,getModelMarkers,onDidChangeMarkers,getModels,getModel,onDidCreateModel,onWillDisposeModel,onDidChangeModelLanguage,createWebWorker,colorizeElement,colorize,colorizeModelLine,tokenize,defineTheme,setTheme,remeasureFonts,registerCommand,AccessibilitySupport:standaloneEnums.AccessibilitySupport,ContentWidgetPositionPreference:standaloneEnums.ContentWidgetPositionPreference,CursorChangeReason:standaloneEnums.CursorChangeReason,DefaultEndOfLine:standaloneEnums.DefaultEndOfLine,EditorAutoIndentStrategy:standaloneEnums.EditorAutoIndentStrategy,EditorOption:standaloneEnums.EditorOption,EndOfLinePreference:standaloneEnums.EndOfLinePreference,EndOfLineSequence:standaloneEnums.EndOfLineSequence,MinimapPosition:standaloneEnums.MinimapPosition,MouseTargetType:standaloneEnums.MouseTargetType,OverlayWidgetPositionPreference:standaloneEnums.OverlayWidgetPositionPreference,OverviewRulerLane:standaloneEnums.OverviewRulerLane,RenderLineNumbersType:standaloneEnums.RenderLineNumbersType,RenderMinimap:standaloneEnums.RenderMinimap,ScrollbarVisibility:standaloneEnums.ScrollbarVisibility,ScrollType:standaloneEnums.ScrollType,TextEditorCursorBlinkingStyle:standaloneEnums.TextEditorCursorBlinkingStyle,TextEditorCursorStyle:standaloneEnums.TextEditorCursorStyle,TrackedRangeStickiness:standaloneEnums.TrackedRangeStickiness,WrappingIndent:standaloneEnums.WrappingIndent,InjectedTextCursorStops:standaloneEnums.InjectedTextCursorStops,PositionAffinity:standaloneEnums.PositionAffinity,ConfigurationChangedEvent,BareFontInfo,FontInfo,TextModelResolvedOptions,FindMatch,ApplyUpdateResult,EditorType,EditorOptions}}