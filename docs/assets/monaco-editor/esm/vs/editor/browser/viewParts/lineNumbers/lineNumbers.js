import"./lineNumbers.css";import*as platform from"../../../../base/common/platform.js";import{DynamicViewOverlay}from"../../view/dynamicViewOverlay.js";import{Position}from"../../../common/core/position.js";import{editorActiveLineNumber,editorLineNumbers}from"../../../common/core/editorColorRegistry.js";import{registerThemingParticipant}from"../../../../platform/theme/common/themeService.js";export class LineNumbersOverlay extends DynamicViewOverlay{constructor(context){super(),this._context=context,this._readConfig(),this._lastCursorModelPosition=new Position(1,1),this._renderResult=null,this._activeLineNumber=1,this._context.addEventHandler(this)}_readConfig(){const options=this._context.configuration.options;this._lineHeight=options.get(59);const lineNumbers=options.get(60);this._renderLineNumbers=lineNumbers.renderType,this._renderCustomLineNumbers=lineNumbers.renderFn,this._renderFinalNewline=options.get(84);const layoutInfo=options.get(131);this._lineNumbersLeft=layoutInfo.lineNumbersLeft,this._lineNumbersWidth=layoutInfo.lineNumbersWidth}dispose(){this._context.removeEventHandler(this),this._renderResult=null,super.dispose()}onConfigurationChanged(e){return this._readConfig(),!0}onCursorStateChanged(e){const primaryViewPosition=e.selections[0].getPosition();this._lastCursorModelPosition=this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);let shouldRender=!1;return this._activeLineNumber!==primaryViewPosition.lineNumber&&(this._activeLineNumber=primaryViewPosition.lineNumber,shouldRender=!0),2!==this._renderLineNumbers&&3!==this._renderLineNumbers||(shouldRender=!0),shouldRender}onFlushed(e){return!0}onLinesChanged(e){return!0}onLinesDeleted(e){return!0}onLinesInserted(e){return!0}onScrollChanged(e){return e.scrollTopChanged}onZonesChanged(e){return!0}_getLineRenderLineNumber(viewLineNumber){const modelPosition=this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber,1));if(1!==modelPosition.column)return"";const modelLineNumber=modelPosition.lineNumber;if(this._renderCustomLineNumbers)return this._renderCustomLineNumbers(modelLineNumber);if(2===this._renderLineNumbers){const diff=Math.abs(this._lastCursorModelPosition.lineNumber-modelLineNumber);return 0===diff?'<span class="relative-current-line-number">'+modelLineNumber+"</span>":String(diff)}return 3===this._renderLineNumbers?this._lastCursorModelPosition.lineNumber===modelLineNumber||modelLineNumber%10==0?String(modelLineNumber):"":String(modelLineNumber)}prepareRender(ctx){if(0===this._renderLineNumbers)return void(this._renderResult=null);const lineHeightClassName=platform.isLinux?this._lineHeight%2==0?" lh-even":" lh-odd":"",visibleStartLineNumber=ctx.visibleRange.startLineNumber,visibleEndLineNumber=ctx.visibleRange.endLineNumber,common='<div class="'+LineNumbersOverlay.CLASS_NAME+lineHeightClassName+'" style="left:'+this._lineNumbersLeft+"px;width:"+this._lineNumbersWidth+'px;">',lineCount=this._context.viewModel.getLineCount(),output=[];for(let lineNumber=visibleStartLineNumber;lineNumber<=visibleEndLineNumber;lineNumber++){const lineIndex=lineNumber-visibleStartLineNumber;if(!this._renderFinalNewline&&lineNumber===lineCount&&0===this._context.viewModel.getLineLength(lineNumber)){output[lineIndex]="";continue}const renderLineNumber=this._getLineRenderLineNumber(lineNumber);renderLineNumber?lineNumber===this._activeLineNumber?output[lineIndex]='<div class="active-line-number '+LineNumbersOverlay.CLASS_NAME+lineHeightClassName+'" style="left:'+this._lineNumbersLeft+"px;width:"+this._lineNumbersWidth+'px;">'+renderLineNumber+"</div>":output[lineIndex]=common+renderLineNumber+"</div>":output[lineIndex]=""}this._renderResult=output}render(startLineNumber,lineNumber){if(!this._renderResult)return"";const lineIndex=lineNumber-startLineNumber;return lineIndex<0||lineIndex>=this._renderResult.length?"":this._renderResult[lineIndex]}}LineNumbersOverlay.CLASS_NAME="line-numbers",registerThemingParticipant(((theme,collector)=>{const lineNumbers=theme.getColor(editorLineNumbers);lineNumbers&&collector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);const activeLineNumber=theme.getColor(editorActiveLineNumber);activeLineNumber&&collector.addRule(`.monaco-editor .line-numbers.active-line-number { color: ${activeLineNumber}; }`)}));