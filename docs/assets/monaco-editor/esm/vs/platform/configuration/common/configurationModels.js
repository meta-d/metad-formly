import*as arrays from"../../../base/common/arrays.js";import{ResourceMap}from"../../../base/common/map.js";import*as objects from"../../../base/common/objects.js";import*as types from"../../../base/common/types.js";import{URI}from"../../../base/common/uri.js";import{addToValueTree,getConfigurationValue,removeFromValueTree,toValuesTree}from"./configuration.js";import{Extensions,overrideIdentifiersFromKey,OVERRIDE_PROPERTY_REGEX}from"./configurationRegistry.js";import{Registry}from"../../registry/common/platform.js";export class ConfigurationModel{constructor(_contents={},_keys=[],_overrides=[]){this._contents=_contents,this._keys=_keys,this._overrides=_overrides,this.isFrozen=!1,this.overrideConfigurations=new Map}get contents(){return this.checkAndFreeze(this._contents)}get overrides(){return this.checkAndFreeze(this._overrides)}get keys(){return this.checkAndFreeze(this._keys)}isEmpty(){return 0===this._keys.length&&0===Object.keys(this._contents).length&&0===this._overrides.length}getValue(section){return section?getConfigurationValue(this.contents,section):this.contents}getOverrideValue(section,overrideIdentifier){const overrideContents=this.getContentsForOverrideIdentifer(overrideIdentifier);return overrideContents?section?getConfigurationValue(overrideContents,section):overrideContents:void 0}override(identifier){let overrideConfigurationModel=this.overrideConfigurations.get(identifier);return overrideConfigurationModel||(overrideConfigurationModel=this.createOverrideConfigurationModel(identifier),this.overrideConfigurations.set(identifier,overrideConfigurationModel)),overrideConfigurationModel}merge(...others){const contents=objects.deepClone(this.contents),overrides=objects.deepClone(this.overrides),keys=[...this.keys];for(const other of others){this.mergeContents(contents,other.contents);for(const otherOverride of other.overrides){const[override]=overrides.filter((o=>arrays.equals(o.identifiers,otherOverride.identifiers)));override?(this.mergeContents(override.contents,otherOverride.contents),override.keys.push(...otherOverride.keys),override.keys=arrays.distinct(override.keys)):overrides.push(objects.deepClone(otherOverride))}for(const key of other.keys)-1===keys.indexOf(key)&&keys.push(key)}return new ConfigurationModel(contents,keys,overrides)}freeze(){return this.isFrozen=!0,this}createOverrideConfigurationModel(identifier){const overrideContents=this.getContentsForOverrideIdentifer(identifier);if(!overrideContents||"object"!=typeof overrideContents||!Object.keys(overrideContents).length)return this;let contents={};for(const key of arrays.distinct([...Object.keys(this.contents),...Object.keys(overrideContents)])){let contentsForKey=this.contents[key],overrideContentsForKey=overrideContents[key];overrideContentsForKey&&("object"==typeof contentsForKey&&"object"==typeof overrideContentsForKey?(contentsForKey=objects.deepClone(contentsForKey),this.mergeContents(contentsForKey,overrideContentsForKey)):contentsForKey=overrideContentsForKey),contents[key]=contentsForKey}return new ConfigurationModel(contents,this.keys,this.overrides)}mergeContents(source,target){for(const key of Object.keys(target))key in source&&types.isObject(source[key])&&types.isObject(target[key])?this.mergeContents(source[key],target[key]):source[key]=objects.deepClone(target[key])}checkAndFreeze(data){return this.isFrozen&&!Object.isFrozen(data)?objects.deepFreeze(data):data}getContentsForOverrideIdentifer(identifier){let contentsForIdentifierOnly=null,contents=null;const mergeContents=contentsToMerge=>{contentsToMerge&&(contents?this.mergeContents(contents,contentsToMerge):contents=objects.deepClone(contentsToMerge))};for(const override of this.overrides)arrays.equals(override.identifiers,[identifier])?contentsForIdentifierOnly=override.contents:override.identifiers.includes(identifier)&&mergeContents(override.contents);return mergeContents(contentsForIdentifierOnly),contents}toJSON(){return{contents:this.contents,overrides:this.overrides,keys:this.keys}}setValue(key,value){this.addKey(key),addToValueTree(this.contents,key,value,(e=>{throw new Error(e)}))}removeValue(key){this.removeKey(key)&&removeFromValueTree(this.contents,key)}addKey(key){let index=this.keys.length;for(let i=0;i<index;i++)0===key.indexOf(this.keys[i])&&(index=i);this.keys.splice(index,1,key)}removeKey(key){let index=this.keys.indexOf(key);return-1!==index&&(this.keys.splice(index,1),!0)}}export class DefaultConfigurationModel extends ConfigurationModel{constructor(configurationDefaultsOverrides={}){const properties=Registry.as(Extensions.Configuration).getConfigurationProperties(),keys=Object.keys(properties),contents=Object.create(null),overrides=[];for(const key in properties){const defaultOverrideValue=configurationDefaultsOverrides[key],value=void 0!==defaultOverrideValue?defaultOverrideValue:properties[key].default;addToValueTree(contents,key,value,(message=>console.error(`Conflict in default settings: ${message}`)))}for(const key of Object.keys(contents))OVERRIDE_PROPERTY_REGEX.test(key)&&overrides.push({identifiers:overrideIdentifiersFromKey(key),keys:Object.keys(contents[key]),contents:toValuesTree(contents[key],(message=>console.error(`Conflict in default settings file: ${message}`)))});super(contents,keys,overrides)}}export class Configuration{constructor(_defaultConfiguration,_localUserConfiguration,_remoteUserConfiguration=new ConfigurationModel,_workspaceConfiguration=new ConfigurationModel,_folderConfigurations=new ResourceMap,_memoryConfiguration=new ConfigurationModel,_memoryConfigurationByResource=new ResourceMap,_freeze=!0){this._defaultConfiguration=_defaultConfiguration,this._localUserConfiguration=_localUserConfiguration,this._remoteUserConfiguration=_remoteUserConfiguration,this._workspaceConfiguration=_workspaceConfiguration,this._folderConfigurations=_folderConfigurations,this._memoryConfiguration=_memoryConfiguration,this._memoryConfigurationByResource=_memoryConfigurationByResource,this._freeze=_freeze,this._workspaceConsolidatedConfiguration=null,this._foldersConsolidatedConfigurations=new ResourceMap,this._userConfiguration=null}getValue(section,overrides,workspace){return this.getConsolidateConfigurationModel(overrides,workspace).getValue(section)}updateValue(key,value,overrides={}){let memoryConfiguration;overrides.resource?(memoryConfiguration=this._memoryConfigurationByResource.get(overrides.resource),memoryConfiguration||(memoryConfiguration=new ConfigurationModel,this._memoryConfigurationByResource.set(overrides.resource,memoryConfiguration))):memoryConfiguration=this._memoryConfiguration,void 0===value?memoryConfiguration.removeValue(key):memoryConfiguration.setValue(key,value),overrides.resource||(this._workspaceConsolidatedConfiguration=null)}inspect(key,overrides,workspace){const consolidateConfigurationModel=this.getConsolidateConfigurationModel(overrides,workspace),folderConfigurationModel=this.getFolderConfigurationModelForResource(overrides.resource,workspace),memoryConfigurationModel=overrides.resource&&this._memoryConfigurationByResource.get(overrides.resource)||this._memoryConfiguration,defaultValue=overrides.overrideIdentifier?this._defaultConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key):this._defaultConfiguration.freeze().getValue(key),userValue=overrides.overrideIdentifier?this.userConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key):this.userConfiguration.freeze().getValue(key),userLocalValue=overrides.overrideIdentifier?this.localUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key):this.localUserConfiguration.freeze().getValue(key),userRemoteValue=overrides.overrideIdentifier?this.remoteUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key):this.remoteUserConfiguration.freeze().getValue(key),workspaceValue=workspace?overrides.overrideIdentifier?this._workspaceConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key):this._workspaceConfiguration.freeze().getValue(key):void 0,workspaceFolderValue=folderConfigurationModel?overrides.overrideIdentifier?folderConfigurationModel.freeze().override(overrides.overrideIdentifier).getValue(key):folderConfigurationModel.freeze().getValue(key):void 0,memoryValue=overrides.overrideIdentifier?memoryConfigurationModel.override(overrides.overrideIdentifier).getValue(key):memoryConfigurationModel.getValue(key),value=consolidateConfigurationModel.getValue(key),overrideIdentifiers=arrays.distinct(arrays.flatten(consolidateConfigurationModel.overrides.map((override=>override.identifiers)))).filter((overrideIdentifier=>void 0!==consolidateConfigurationModel.getOverrideValue(key,overrideIdentifier)));return{defaultValue,userValue,userLocalValue,userRemoteValue,workspaceValue,workspaceFolderValue,memoryValue,value,default:void 0!==defaultValue?{value:this._defaultConfiguration.freeze().getValue(key),override:overrides.overrideIdentifier?this._defaultConfiguration.freeze().getOverrideValue(key,overrides.overrideIdentifier):void 0}:void 0,user:void 0!==userValue?{value:this.userConfiguration.freeze().getValue(key),override:overrides.overrideIdentifier?this.userConfiguration.freeze().getOverrideValue(key,overrides.overrideIdentifier):void 0}:void 0,userLocal:void 0!==userLocalValue?{value:this.localUserConfiguration.freeze().getValue(key),override:overrides.overrideIdentifier?this.localUserConfiguration.freeze().getOverrideValue(key,overrides.overrideIdentifier):void 0}:void 0,userRemote:void 0!==userRemoteValue?{value:this.remoteUserConfiguration.freeze().getValue(key),override:overrides.overrideIdentifier?this.remoteUserConfiguration.freeze().getOverrideValue(key,overrides.overrideIdentifier):void 0}:void 0,workspace:void 0!==workspaceValue?{value:this._workspaceConfiguration.freeze().getValue(key),override:overrides.overrideIdentifier?this._workspaceConfiguration.freeze().getOverrideValue(key,overrides.overrideIdentifier):void 0}:void 0,workspaceFolder:void 0!==workspaceFolderValue?{value:null==folderConfigurationModel?void 0:folderConfigurationModel.freeze().getValue(key),override:overrides.overrideIdentifier?null==folderConfigurationModel?void 0:folderConfigurationModel.freeze().getOverrideValue(key,overrides.overrideIdentifier):void 0}:void 0,memory:void 0!==memoryValue?{value:memoryConfigurationModel.getValue(key),override:overrides.overrideIdentifier?memoryConfigurationModel.getOverrideValue(key,overrides.overrideIdentifier):void 0}:void 0,overrideIdentifiers:overrideIdentifiers.length?overrideIdentifiers:void 0}}get userConfiguration(){return this._userConfiguration||(this._userConfiguration=this._remoteUserConfiguration.isEmpty()?this._localUserConfiguration:this._localUserConfiguration.merge(this._remoteUserConfiguration),this._freeze&&this._userConfiguration.freeze()),this._userConfiguration}get localUserConfiguration(){return this._localUserConfiguration}get remoteUserConfiguration(){return this._remoteUserConfiguration}getConsolidateConfigurationModel(overrides,workspace){let configurationModel=this.getConsolidatedConfigurationModelForResource(overrides,workspace);return overrides.overrideIdentifier?configurationModel.override(overrides.overrideIdentifier):configurationModel}getConsolidatedConfigurationModelForResource({resource},workspace){let consolidateConfiguration=this.getWorkspaceConsolidatedConfiguration();if(workspace&&resource){const root=workspace.getFolder(resource);root&&(consolidateConfiguration=this.getFolderConsolidatedConfiguration(root.uri)||consolidateConfiguration);const memoryConfigurationForResource=this._memoryConfigurationByResource.get(resource);memoryConfigurationForResource&&(consolidateConfiguration=consolidateConfiguration.merge(memoryConfigurationForResource))}return consolidateConfiguration}getWorkspaceConsolidatedConfiguration(){return this._workspaceConsolidatedConfiguration||(this._workspaceConsolidatedConfiguration=this._defaultConfiguration.merge(this.userConfiguration,this._workspaceConfiguration,this._memoryConfiguration),this._freeze&&(this._workspaceConfiguration=this._workspaceConfiguration.freeze())),this._workspaceConsolidatedConfiguration}getFolderConsolidatedConfiguration(folder){let folderConsolidatedConfiguration=this._foldersConsolidatedConfigurations.get(folder);if(!folderConsolidatedConfiguration){const workspaceConsolidateConfiguration=this.getWorkspaceConsolidatedConfiguration(),folderConfiguration=this._folderConfigurations.get(folder);folderConfiguration?(folderConsolidatedConfiguration=workspaceConsolidateConfiguration.merge(folderConfiguration),this._freeze&&(folderConsolidatedConfiguration=folderConsolidatedConfiguration.freeze()),this._foldersConsolidatedConfigurations.set(folder,folderConsolidatedConfiguration)):folderConsolidatedConfiguration=workspaceConsolidateConfiguration}return folderConsolidatedConfiguration}getFolderConfigurationModelForResource(resource,workspace){if(workspace&&resource){const root=workspace.getFolder(resource);if(root)return this._folderConfigurations.get(root.uri)}}toData(){return{defaults:{contents:this._defaultConfiguration.contents,overrides:this._defaultConfiguration.overrides,keys:this._defaultConfiguration.keys},user:{contents:this.userConfiguration.contents,overrides:this.userConfiguration.overrides,keys:this.userConfiguration.keys},workspace:{contents:this._workspaceConfiguration.contents,overrides:this._workspaceConfiguration.overrides,keys:this._workspaceConfiguration.keys},folders:[...this._folderConfigurations.keys()].reduce(((result,folder)=>{const{contents,overrides,keys}=this._folderConfigurations.get(folder);return result.push([folder,{contents,overrides,keys}]),result}),[])}}static parse(data){const defaultConfiguration=this.parseConfigurationModel(data.defaults),userConfiguration=this.parseConfigurationModel(data.user),workspaceConfiguration=this.parseConfigurationModel(data.workspace),folders=data.folders.reduce(((result,value)=>(result.set(URI.revive(value[0]),this.parseConfigurationModel(value[1])),result)),new ResourceMap);return new Configuration(defaultConfiguration,userConfiguration,new ConfigurationModel,workspaceConfiguration,folders,new ConfigurationModel,new ResourceMap,!1)}static parseConfigurationModel(model){return new ConfigurationModel(model.contents,model.keys,model.overrides).freeze()}}export class ConfigurationChangeEvent{constructor(change,previous,currentConfiguraiton,currentWorkspace){this.change=change,this.previous=previous,this.currentConfiguraiton=currentConfiguraiton,this.currentWorkspace=currentWorkspace,this._previousConfiguration=void 0;const keysSet=new Set;change.keys.forEach((key=>keysSet.add(key))),change.overrides.forEach((([,keys])=>keys.forEach((key=>keysSet.add(key))))),this.affectedKeys=[...keysSet.values()];const configurationModel=new ConfigurationModel;this.affectedKeys.forEach((key=>configurationModel.setValue(key,{}))),this.affectedKeysTree=configurationModel.contents}get previousConfiguration(){return!this._previousConfiguration&&this.previous&&(this._previousConfiguration=Configuration.parse(this.previous.data)),this._previousConfiguration}affectsConfiguration(section,overrides){var _a;if(this.doesAffectedKeysTreeContains(this.affectedKeysTree,section)){if(overrides){const value1=this.previousConfiguration?this.previousConfiguration.getValue(section,overrides,null===(_a=this.previous)||void 0===_a?void 0:_a.workspace):void 0,value2=this.currentConfiguraiton.getValue(section,overrides,this.currentWorkspace);return!objects.equals(value1,value2)}return!0}return!1}doesAffectedKeysTreeContains(affectedKeysTree,section){let key,requestedTree=toValuesTree({[section]:!0},(()=>{}));for(;"object"==typeof requestedTree&&(key=Object.keys(requestedTree)[0]);){if(!(affectedKeysTree=affectedKeysTree[key]))return!1;requestedTree=requestedTree[key]}return!0}}