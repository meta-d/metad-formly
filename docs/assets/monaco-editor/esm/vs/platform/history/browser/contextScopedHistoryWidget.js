var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=this&&this.__param||function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}};import{FindInput}from"../../../base/browser/ui/findinput/findInput.js";import{ReplaceInput}from"../../../base/browser/ui/findinput/replaceInput.js";import{ContextKeyExpr,IContextKeyService,RawContextKey}from"../../contextkey/common/contextkey.js";import{KeybindingsRegistry}from"../../keybinding/common/keybindingsRegistry.js";import{localize}from"../../../nls.js";export const historyNavigationVisible=new RawContextKey("suggestWidgetVisible",!1,localize("suggestWidgetVisible","Whether suggestion are visible"));export const HistoryNavigationWidgetContext="historyNavigationWidget";const HistoryNavigationForwardsEnablementContext="historyNavigationForwardsEnabled",HistoryNavigationBackwardsEnablementContext="historyNavigationBackwardsEnabled";function bindContextScopedWidget(contextKeyService,widget,contextKey){new RawContextKey(contextKey,widget).bindTo(contextKeyService)}function createWidgetScopedContextKeyService(contextKeyService,widget){return contextKeyService.createScoped(widget.target)}function getContextScopedWidget(contextKeyService,contextKey){return contextKeyService.getContext(document.activeElement).getValue(contextKey)}export function createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService,widget){const scopedContextKeyService=createWidgetScopedContextKeyService(contextKeyService,widget);bindContextScopedWidget(scopedContextKeyService,widget,"historyNavigationWidget");return{scopedContextKeyService,historyNavigationForwardsEnablement:new RawContextKey("historyNavigationForwardsEnabled",!0).bindTo(scopedContextKeyService),historyNavigationBackwardsEnablement:new RawContextKey("historyNavigationBackwardsEnabled",!0).bindTo(scopedContextKeyService)}}let ContextScopedFindInput=class ContextScopedFindInput extends FindInput{constructor(container,contextViewProvider,options,contextKeyService,showFindOptions=!1){super(container,contextViewProvider,showFindOptions,options),this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService,{target:this.inputBox.element,historyNavigator:this.inputBox}).scopedContextKeyService)}};ContextScopedFindInput=__decorate([__param(3,IContextKeyService)],ContextScopedFindInput);export{ContextScopedFindInput};let ContextScopedReplaceInput=class ContextScopedReplaceInput extends ReplaceInput{constructor(container,contextViewProvider,options,contextKeyService,showReplaceOptions=!1){super(container,contextViewProvider,showReplaceOptions,options),this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService,{target:this.inputBox.element,historyNavigator:this.inputBox}).scopedContextKeyService)}};ContextScopedReplaceInput=__decorate([__param(3,IContextKeyService)],ContextScopedReplaceInput);export{ContextScopedReplaceInput};KeybindingsRegistry.registerCommandAndKeybindingRule({id:"history.showPrevious",weight:200,when:ContextKeyExpr.and(ContextKeyExpr.has("historyNavigationWidget"),ContextKeyExpr.equals("historyNavigationBackwardsEnabled",!0),historyNavigationVisible.isEqualTo(!1)),primary:16,secondary:[528],handler:accessor=>{const widget=getContextScopedWidget(accessor.get(IContextKeyService),"historyNavigationWidget");if(widget){widget.historyNavigator.showPreviousValue()}}}),KeybindingsRegistry.registerCommandAndKeybindingRule({id:"history.showNext",weight:200,when:ContextKeyExpr.and(ContextKeyExpr.has("historyNavigationWidget"),ContextKeyExpr.equals("historyNavigationForwardsEnabled",!0),historyNavigationVisible.isEqualTo(!1)),primary:18,secondary:[530],handler:accessor=>{const widget=getContextScopedWidget(accessor.get(IContextKeyService),"historyNavigationWidget");if(widget){widget.historyNavigator.showNextValue()}}});