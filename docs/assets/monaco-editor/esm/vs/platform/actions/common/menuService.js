var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=this&&this.__param||function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}};import{RunOnceScheduler}from"../../../base/common/async.js";import{Emitter}from"../../../base/common/event.js";import{DisposableStore}from"../../../base/common/lifecycle.js";import{IMenuService,isIMenuItem,MenuItemAction,MenuRegistry,SubmenuItemAction}from"./actions.js";import{ICommandService}from"../../commands/common/commands.js";import{IContextKeyService}from"../../contextkey/common/contextkey.js";let MenuService=class MenuService{constructor(_commandService){this._commandService=_commandService}createMenu(id,contextKeyService,options){return new Menu(id,Object.assign({emitEventsForSubmenuChanges:!1,eventDebounceDelay:50},options),this._commandService,contextKeyService,this)}};MenuService=__decorate([__param(0,ICommandService)],MenuService);export{MenuService};let Menu=class Menu{constructor(_id,_options,_commandService,_contextKeyService,_menuService){this._id=_id,this._options=_options,this._commandService=_commandService,this._contextKeyService=_contextKeyService,this._menuService=_menuService,this._disposables=new DisposableStore,this._menuGroups=[],this._contextKeys=new Set,this._build();const rebuildMenuSoon=new RunOnceScheduler((()=>{this._build(),this._onDidChange.fire(this)}),_options.eventDebounceDelay);this._disposables.add(rebuildMenuSoon),this._disposables.add(MenuRegistry.onDidChangeMenu((e=>{e.has(_id)&&rebuildMenuSoon.schedule()})));const contextKeyListener=this._disposables.add(new DisposableStore);this._onDidChange=new Emitter({onFirstListenerAdd:()=>{const fireChangeSoon=new RunOnceScheduler((()=>this._onDidChange.fire(this)),_options.eventDebounceDelay);contextKeyListener.add(fireChangeSoon),contextKeyListener.add(_contextKeyService.onDidChangeContext((e=>{e.affectsSome(this._contextKeys)&&fireChangeSoon.schedule()})))},onLastListenerRemove:contextKeyListener.clear.bind(contextKeyListener)}),this.onDidChange=this._onDidChange.event}dispose(){this._disposables.dispose(),this._onDidChange.dispose()}_build(){this._menuGroups.length=0,this._contextKeys.clear();const menuItems=MenuRegistry.getMenuItems(this._id);let group;menuItems.sort(Menu._compareMenuItems);for(const item of menuItems){const groupName=item.group||"";group&&group[0]===groupName||(group=[groupName,[]],this._menuGroups.push(group)),group[1].push(item),this._collectContextKeys(item)}}_collectContextKeys(item){if(Menu._fillInKbExprKeys(item.when,this._contextKeys),isIMenuItem(item)){if(item.command.precondition&&Menu._fillInKbExprKeys(item.command.precondition,this._contextKeys),item.command.toggled){const toggledExpression=item.command.toggled.condition||item.command.toggled;Menu._fillInKbExprKeys(toggledExpression,this._contextKeys)}}else this._options.emitEventsForSubmenuChanges&&MenuRegistry.getMenuItems(item.submenu).forEach(this._collectContextKeys,this)}getActions(options){const result=[];for(let group of this._menuGroups){const[id,items]=group,activeActions=[];for(const item of items)if(this._contextKeyService.contextMatchesRules(item.when)){const action=isIMenuItem(item)?new MenuItemAction(item.command,item.alt,options,this._contextKeyService,this._commandService):new SubmenuItemAction(item,this._menuService,this._contextKeyService,options);activeActions.push(action)}activeActions.length>0&&result.push([id,activeActions])}return result}static _fillInKbExprKeys(exp,set){if(exp)for(let key of exp.keys())set.add(key)}static _compareMenuItems(a,b){let aGroup=a.group,bGroup=b.group;if(aGroup!==bGroup){if(!aGroup)return 1;if(!bGroup)return-1;if("navigation"===aGroup)return-1;if("navigation"===bGroup)return 1;let value=aGroup.localeCompare(bGroup);if(0!==value)return value}let aPrio=a.order||0,bPrio=b.order||0;return aPrio<bPrio?-1:aPrio>bPrio?1:Menu._compareTitles(isIMenuItem(a)?a.command.title:a.title,isIMenuItem(b)?b.command.title:b.title)}static _compareTitles(a,b){const aStr="string"==typeof a?a:a.original,bStr="string"==typeof b?b:b.original;return aStr.localeCompare(bStr)}};Menu=__decorate([__param(2,ICommandService),__param(3,IContextKeyService),__param(4,IMenuService)],Menu);